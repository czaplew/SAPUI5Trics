sap.ui.define([
	"sap/ui/base/Object",
	"sap/m/MessageBox"
], function (UI5Object, MessageBox) {
	"use strict";

	return UI5Object.extend("com/power/invoices/controller/ErrorHandler", {

		_sErrorText: "",

		/**
		 * Handles application errors by automatically attaching to the model events and displaying errors when needed.
		 * @class
		 * @param {sap.ui.core.UIComponent} oComponent reference to the app's component
		 * @public
		 * @alias asservatenverwaltung.controller.ErrorHandler
		 */
		constructor: function (oComponent) {
			this._oResourceBundle = oComponent.getModel("i18n").getResourceBundle();
			this._oComponent = oComponent;
			this._oModel = oComponent.getModel();
			this._bMessageOpen = false;

			this._oModel.attachMetadataFailed(function (oEvent) {
				MessageBox.error(this._oResourceBundle.getText("message.noConnection"));
			}.bind(this), this);

			this._oModel.attachRequestFailed(function (oEvent) {
				var oParams = oEvent.getParameters();
				this._showServiceError(oParams.response);
			}, this);
		},

		/**
		 * Shows a {@link sap.m.MessageBox} when a service call has failed.
		 * Only the first error message will be display.
		 * @param {string} sDetails a technical error to be displayed on request
		 * @private
		 */
		_showServiceError: function (sDetails) {
			try {
				JSON.parse(sDetails.responseText);
			} catch (e) {
				return;
			}

			if (this._bMessageOpen || sDetails.statusCode === 404) {
				return;
			}
			this._bMessageOpen = true;

			if (Array.isArray(JSON.parse(sDetails.responseText).error.innererror.errordetails)) {
				JSON.parse(sDetails.responseText).error.innererror.errordetails.forEach(function (oError) {
					this._sErrorText += oError.message + "\n";
				}.bind(this));
			}

			MessageBox.error(this._sErrorText, {
				id: "serviceErrorMessageBox",
				actions: [MessageBox.Action.CLOSE],
				onClose: function () {
					this._bMessageOpen = false;
				}.bind(this)
			});
		}
	});
});
